---
/*
 * Blog index page template
 *
 * Lists all of the blog posts.
 */
import type { GetStaticPaths, Page } from "astro";
import { getCollection } from "astro:content";
import type { CollectionEntry } from "astro:content";
import Section from "delta-theme/components/Section.astro";
import Pagination from "delta-theme/components/Pagination.astro";
import Layout from "../../layouts/Layout.astro";
import PostsList from "../../components/PostsList.astro";

export const sortUserStories = (
  a: CollectionEntry<"userStories">,
  b: CollectionEntry<"userStories">,
): number => b.data.publishedAt.getTime() - a.data.publishedAt.getTime();

export const getStaticPaths = (async ({ paginate }) => {
  const posts = await getCollection("userStories");

  posts.sort(sortUserStories);

  // Omit the first post as this will be "featured"
  return paginate(posts.slice(1), { pageSize: 12 });
}) satisfies GetStaticPaths;

type Props = {
  page: Page<CollectionEntry<"userStories">>;
};

const { page } = Astro.props;

// Perform a separate query to get the first user story to feature on the first page
const latestPosts =
  page.currentPage === 1 ? await getCollection("userStories") : [];
latestPosts.sort(sortUserStories);
---

<Layout title="Case Studies">
  <Section title="Case Studies" isPrimary padding="xxl" className="bg-white">
    {
      page.currentPage === 1 && (
        <PostsList posts={latestPosts.slice(0, 1)} hasFeaturedItem />
      )
    }
    <PostsList posts={page.data} />
    {
      page.lastPage > 1 && (
        <Pagination
          prevUrl={page.url.prev}
          nextUrl={page.url.next}
          currentPage={page.currentPage}
          lastPage={page.lastPage}
        />
      )
    }
  </Section>
</Layout>
