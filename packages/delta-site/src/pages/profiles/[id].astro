---
/*
 * Profile detail page template
 *
 * Gives information about a single profile.
 */
import { Image } from "astro:assets";
import { getCollection, render } from "astro:content";
import clsx from "clsx";
import Section from "delta-theme/components/Section.astro";
import Grid from "delta-theme/components/Grid.astro";
import Typography from "delta-theme/components/Typography.astro";
import Icon from "delta-theme/components/Icon.astro";
import { fetchVideosByIds } from "@utils/fetchYoutube";
import { getPermalink } from "@utils/getPermalink";
import ImageStrip from "../../components/ImageStrip.astro";
import Layout from "../../layouts/Layout.astro";

// Tell Astro to geterate a path for each author
export async function getStaticPaths() {
  const profiles = await getCollection("profiles");

  return profiles.map((profile) => ({
    params: { id: profile.id },
    props: { profile },
  }));
}

const { profile } = Astro.props;
const { Content } = await render(profile);

// Get references
const blogs = await getCollection("blog", (post) => {
  return post.data.author.id === profile.id;
});
const videos = profile.data.videos
  ? await fetchVideosByIds(profile.data.videos)
  : [];
const others = profile.data.otherReferences ?? [];
const references = [...blogs, ...videos, ...others];

// Sort references published date in descending order
references.sort((a, b) => {
  const currDate =
    "collection" in a ? a.data.publishedAt.getTime() : a.publishedAt.getTime();
  const nextDate =
    "collection" in b ? b.data.publishedAt.getTime() : b.publishedAt.getTime();

  return nextDate - currDate;
});
---

<Layout title={profile.data.name}>
  <Section padding="xxl" className="bg-white">
    <Grid
      columns={profile.data.photo ? { xs: 1, md: ["200px", "auto"] } : 1}
      className={clsx("gap-xxl", {
        "items-center": !profile.data.quote,
      })}
    >
      {
        profile.data.photo && (
          <Image
            src={profile.data.photo}
            alt={`Photo of ${profile.data.name}`}
            width="200"
            densities={[1, 2]}
            loading="eager"
          />
        )
      }
      <Typography variant="prose">
        <Grid
          columns={{ xs: 1, lg: ["auto", "max-content"] }}
          className="gap-sm lg:gap-lg lg:items-center"
        >
          <div>
            <h1 class="text-h2 font-normal mb-sm">{profile.data.name}</h1>
            {
              profile.data.role && (
                <h3 class="text-h4 font-normal mt-0">{profile.data.role}</h3>
              )
            }
          </div>
          {
            profile.data.linkedin && (
              <div class="flex text-h2 gap-sm">
                <a
                  href={profile.data.linkedin}
                  target="_blank"
                  title="View LinkedIn profile"
                >
                  <Icon icon="linkedin" alt="" />
                </a>
              </div>
            )
          }
        </Grid>
        {
          profile.data.quote && (
            <blockquote class="mt-md">
              &ldquo;{profile.data.quote}&rdquo;
              {profile.data.quoteSource && (
                <cite>
                  {typeof profile.data.quoteSource === "string" ? (
                    profile.data.quoteSource
                  ) : (
                    <a href={profile.data.quoteSource.url}>
                      {profile.data.quoteSource.label}
                    </a>
                  )}
                </cite>
              )}
            </blockquote>
          )
        }
      </Typography>
      {
        profile.body && (
          <Typography variant="prose" className="col-span-full">
            <Content />
          </Typography>
        )
      }
    </Grid>
  </Section>
  {
    references.length > 0 && (
      <Section padding="xxl" title="References">
        <ImageStrip
          items={references.map((reference) => {
            // blog reference
            if ("collection" in reference) {
              return {
                title: reference.data.title,
                thumbnail: reference.data.thumbnail,
                url: getPermalink(reference),
              };
            }

            // video reference
            if ("permalink" in reference) {
              return {
                title: reference.title,
                thumbnail: reference.thumbnail.url,
                url: reference.permalink,
              };
            }

            // other reference
            return {
              title: reference.title,
              thumbnail: reference.thumbnail,
              url: reference.url,
            };
          })}
          columns={4}
        />
      </Section>
    )
  }
</Layout>
