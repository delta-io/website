[
  {
    "id": "apache-druid",
    "name": "Apache Druid",
    "description": "This connector allows Apache Druid to read from Delta Lake.",
    "url": "https://druid.apache.org/",
    "docs": "https://druid.apache.org/docs/latest/development/extensions-contrib/delta-lake/",
    "source_code": "https://github.com/apache/druid/",
    "tags": ["Druid"],
    "thumbnail": "./images/apache_druid_logo.png"
  },
  {
    "id": "apache-flink",
    "name": "Apache Flink",
    "description": "This connector allows Apache Flink to write to Delta Lake.",
    "url": "https://github.com/delta-io/delta/tree/master/connectors/flink/",
    "docs": "https://github.com/delta-io/delta/tree/master/connectors/flink",
    "source_code": "https://github.com/delta-io/delta/tree/master/connectors/flink",
    "tags": ["Flink", "standalone"],
    "thumbnail": "./images/apache-flink-logo.png"
  },
  {
    "id": "apache-hive",
    "name": "Apache Hive",
    "description": "This connector allows Apache Hive to read from Delta Lake.",
    "url": "https://github.com/delta-io/delta/tree/master/connectors",
    "docs": "https://docs.delta.io/latest/hive-integration.html",
    "source_code": "https://github.com/delta-io/delta/tree/master/connectors/hive/src/main",
    "tags": ["Hive", "standalone"],
    "thumbnail": "./images/hive.png"
  },
  {
    "id": "apache-pulsar",
    "name": "Apache Pulsar",
    "description": "This connector allows Apache Pulsar to read from and write to Delta Lake.",
    "url": "https://streamnative.io/blog/release/2022-08-17-announcing-the-delta-lake-sink-connector-for-apache-pulsar/",
    "docs": "https://github.com/streamnative/pulsar-io-lakehouse/blob/master/docs/delta-lake-demo.md",
    "source_code": "https://github.com/streamnative/pulsar-io-lakehouse",
    "tags": ["Pulsar", "community"],
    "thumbnail": "./images/wFcLUbwd_400x400.jpg"
  },
  {
    "id": "apache-spark",
    "name": "Apache Spark™",
    "description": "This connector allows Apache Spark™ to read from and write to Delta Lake.",
    "url": "https://docs.delta.io",
    "docs": "https://docs.delta.io",
    "source_code": "https://github.com/delta-io/delta/",
    "tags": ["Spark"],
    "thumbnail": "./images/apache-spark-icon.png"
  },
  {
    "id": "clickhouse",
    "name": "ClickHouse",
    "description": "ClickHouse is a column-oriented database that allows users to run SQL queries on Delta Lake tables. This provides a read-only integration with existing Delta Lake tables in Amazon S3.",
    "url": "https://clickhouse.com/",
    "docs": "https://clickhouse.com/docs/en/engines/table-engines/integrations/deltalake",
    "source_code": "https://github.com/ClickHouse/ClickHouse",
    "tags": ["ClickHouse"],
    "thumbnail": "./images/clickhouse_logo.png"
  },
  {
    "id": "dagster",
    "name": "Dagster",
    "description": "Use the Delta Lake IO Manager to read from and write to Delta Lake in your Dagster orchestration pipelines.",
    "url": "https://dagster.io/",
    "docs": "https://delta-io.github.io/delta-rs/integrations/delta-lake-dagster/",
    "source_code": "https://github.com/dagster-io/dagster/tree/e556a8a1d0062ac17e169e656c20fb68f82e8450/python_modules/libraries/dagster-deltalake",
    "tags": ["Dagster", "Python"],
    "thumbnail": "./images/dagster.png"
  },
  {
    "id": "delta-rust-api",
    "name": "Delta Rust API ",
    "description": "This library allows Rust (with Python bindings) low level access to Delta tables and is intended to be used with data processing frameworks like datafusion, ballista, rust-dataframe, vega, etc.",
    "url": "https://github.com/delta-io/delta-rs",
    "docs": "https://docs.rs/deltalake/latest/deltalake/",
    "source_code": "https://github.com/delta-io/delta-rs/tree/main/rust",
    "tags": ["Rust", "Python"],
    "thumbnail": "./images/rust.png"
  },
  {
    "id": "delta-standalone",
    "name": "Delta Standalone",
    "description": "This library allows Scala and Java-based projects (including Apache Flink, Apache Hive, Apache Beam, and PrestoDB) to read from and write to Delta Lake.",
    "url": "https://github.com/delta-io/delta/tree/master/connectors",
    "docs": "https://docs.delta.io/latest/delta-standalone.html",
    "source_code": "https://github.com/delta-io/delta/tree/master/connectors/standalone/src",
    "tags": ["Scala", "Java", "standalone"],
    "thumbnail": "./images/delta-standalone.png"
  },
  {
    "id": "finos-legend",
    "name": "FINOS Legend",
    "description": "An extension to the FINOS Legend framework for Apache Spark™ / Delta Lake based environment, combining best of open data standards with open source technologiesThis connector allows Trino to read from and write to Delta Lake.",
    "url": "https://legend.finos.org/docs/community/external-integrations",
    "docs": "https://github.com/finos/legend-community-delta/blob/main/README.md",
    "source_code": "https://github.com/finos/legend-community-delta",
    "tags": ["FINOS", "Legend"],
    "thumbnail": "./images/229239046-365bc3c4-f644-4fd2-b73f-7efb27366656.png"
  },
  {
    "id": "hopsworks",
    "name": "Hopsworks",
    "description": "Hopsworks Feature Store stores, manages, and serves feature data in Delta Lake.",
    "url": "https://www.hopsworks.ai/dictionary/feature-store",
    "docs": "https://docs.hopsworks.ai/latest/user_guides/fs/feature_group/create/#batch-write-api",
    "source_code": "https://github.com/logicalclocks/feature-store-api/blob/master/python/hsfs/core/delta_engine.py",
    "tags": ["Hopsworks", "Python"],
    "thumbnail": "./images/hopsworks.png"
  },
  {
    "id": "kafka-delta-ingest",
    "name": "Kafka Delta Ingest",
    "description": "This project builds a highly efficient daemon for streaming data through Apache Kafka into Delta Lake.",
    "url": "https://github.com/delta-io/kafka-delta-ingest",
    "docs": "https://github.com/delta-io/kafka-delta-ingest/blob/main/doc/DESIGN.md",
    "source_code": "https://github.com/delta-io/kafka-delta-ingest/",
    "tags": ["Kafka", "Rust"],
    "thumbnail": "./images/kafka.png"
  },
  {
    "id": "prestodb",
    "name": "PrestoDB",
    "description": "This connector allows PrestoDB to read from Delta Lake.",
    "url": "https://prestodb.io/docs/current/connector/deltalake.html",
    "docs": "https://prestodb.io/docs/current/connector/deltalake.html",
    "source_code": "https://github.com/prestodb/presto/tree/master/presto-delta",
    "tags": ["PrestoDB", "standalone"],
    "thumbnail": "./images/prestodb-logo.png"
  },
  {
    "id": "risingwave",
    "name": "RisingWave",
    "description": "This connector allows RisingWave to write to Delta Lake.",
    "url": "https://docs.risingwave.com/integrations/destinations/delta-lake",
    "docs": "https://docs.risingwave.com/integrations/destinations/delta-lake",
    "source_code": "https://github.com/risingwavelabs/risingwave/blob/main/src/connector/src/sink/deltalake.rs",
    "tags": ["RisingWave", "standalone"],
    "thumbnail": "./images/risingwave_logo.png"
  },
  {
    "id": "sql-delta-import",
    "name": "SQL Delta Import",
    "description": "This utility is for importing data from a JDBC source into a Delta Lake table.",
    "url": "https://github.com/delta-io/delta/blob/master/connectors/sql-delta-import/readme.md",
    "docs": "https://github.com/delta-io/delta/blob/master/connectors/sql-delta-import/readme.md",
    "source_code": "https://github.com/delta-io/delta/tree/master/connectors/sql-delta-import/src",
    "tags": ["SQL", "JDBC"],
    "thumbnail": "./images/sql.png"
  },
  {
    "id": "starrocks",
    "name": "StarRocks",
    "description": "StarRocks, a Linux Foundation project, is a next-generation sub-second MPP OLAP database for full analytics scenarios, including multi-dimensional analytics, real-time analytics, and ad-hoc queries. StarRocks has the ability to read from Delta Lake.",
    "url": "https://starrocks.io",
    "docs": "https://docs.starrocks.io/en-us/latest/data_source/catalog/deltalake_catalog",
    "source_code": "https://github.com/StarRocks/starrocks",
    "tags": ["StarRocks"],
    "thumbnail": "./images/starrocks_logo.png"
  },
  {
    "id": "trino",
    "name": "Trino",
    "description": "This connector allows Trino to read from and write to Delta Lake.",
    "url": "https://trino.io/docs/current/connector/delta-lake.html",
    "docs": "https://trino.io/docs/current/connector/delta-lake.html",
    "source_code": "https://github.com/trinodb/trino/tree/master/plugin/trino-delta-lake",
    "tags": ["Trino"],
    "thumbnail": "./images/trino-logo.png"
  }
]
