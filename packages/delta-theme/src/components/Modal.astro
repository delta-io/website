---
import clsx from "clsx";
import Icon from "./Icon.astro";

interface Props {
  id: string;
  children: unknown;
  isOpen?: boolean;
  hideCloseButton?: boolean;
  className?: string;
}

const transitionDuration = "200ms";
const slideAnimationDistance = "10px";

const { id, isOpen, hideCloseButton, className } = Astro.props;
---

<dialog id={id} open={isOpen} class={className}>
  <dialog-container data-id={id}>
    <button
      type="button"
      class={clsx(
        "w-[44px] h-[44px] absolute right-0 top-0 text-[rgba(255,255,255,0.75)] hover:text-white",
        {
          "sm:hidden": hideCloseButton,
        },
      )}
      data-close-modal
    >
      <Icon icon="close" alt="Close modal" />
    </button>
    <slot />
  </dialog-container>
</dialog>
<style define:vars={{ transitionDuration, slideAnimationDistance }}>
  dialog {
    background: transparent;
    max-width: none;
    max-height: none;
    opacity: 0;
    transform: translateY(calc(-1 * var(--slideAnimationDistance)));
    margin: 0;
    z-index: 50;
    transition:
      opacity var(--transitionDuration) ease-out,
      transform var(--transitionDuration) ease-out,
      overlay var(--transitionDuration) ease-out allow-discrete,
      display var(--transitionDuration) ease-out allow-discrete;
  }

  dialog-container {
    display: block;
    background-color: theme(colors.darkBg);
    border: 1px solid theme(colors.darkBg);
    box-shadow: 0px 2px 3px rgba(0, 0, 0, 0.25);
    color: theme(colors.darkColor);
    padding: theme(spacing.lg);
    padding-top: 44px;
    border-radius: 0;
    width: 100vw;
    height: 100vh;
    max-height: 100vh;
    max-width: 100vw;
  }

  @media screen(sm) {
    dialog {
      width: calc(100vw - 32px);
      max-width: theme(screens.md);
      max-height: calc(100vh - (theme(spacing.xxl) * 2));
      margin: theme(spacing.xxl) auto auto;
      height: fit-content;
    }

    dialog-container {
      width: 100%;
      height: auto;
      padding-top: theme(spacing.lg);
      border-radius: theme(borderRadius.md);
    }
  }

  @media screen(md) {
    dialog {
      margin-top: theme(spacing.xxxl);
      max-height: calc(100vh - (theme(spacing.xxxl) * 2));
    }
  }

  dialog[open] {
    opacity: 1;
    transform: translateY(0);
  }

  @starting-style {
    dialog[open] {
      opacity: 0;
      transform: translateY(calc(-1 * var(--slideAnimationDistance)));
    }
  }

  dialog::backdrop {
    background-color: rgba(0, 0, 0, 0);
    transition:
      display var(--transitionDuration) allow-discrete,
      overlay var(--transitionDuration) allow-discrete,
      background-color var(--transitionDuration);
  }

  dialog[open]::backdrop {
    background-color: rgba(0, 0, 0, 0.35);
  }

  @starting-style {
    dialog[open]::backdrop {
      background-color: rgba(0, 0, 0, 0%);
    }
  }
</style>
<script>
  class DialogContainer extends HTMLElement {
    #modal: HTMLDialogElement | null = null;
    #closeButton: HTMLButtonElement | null = null;

    constructor() {
      super();

      const modalId = this.dataset.id;
      this.#modal = document.querySelector(`#${modalId}`);
      this.#closeButton = this.querySelector("button[data-close-modal]");
    }

    connectedCallback() {
      this.#closeButton?.addEventListener("click", () => {
        this.#modal?.close();
      });

      this.#modal?.addEventListener("mousedown", (event) => {
        if (event.target === event.currentTarget) {
          this.#modal?.close();
        }
      });
    }
  }
  customElements.define("dialog-container", DialogContainer);
</script>
