---
/*
 * Grid
 *
 * Constructs a grid container which puts each of its child elements into
 * a grid of rows and columns.
 *
 * Usage
 * =====
 *
 * Columns
 * -------
 * To use it, set columns using the `columns` prop. For example, `3` will create
 * 3 columns. Using an object `{ xs: 1, lg: 3 }` will create a responsive layout
 * with a single column layout on mobile devices and a 3 column layout on "lg"
 * or larger devices.
 *
 * Rows will automatically be created as the number of child elements exceeds
 * the number of columns.
 *
 * Column/row spacing
 * ------------------
 * By default, Grid has a predefined column spacing. Setting a column or row
 * spacing is not directly supported by this component. Instead, you will need
 * to provide your own styles, such as Tailwind classnames using the
 * `classNames` prop.
 */
import clsx from "clsx";

type ColumnRule = number | string | ColumnRule[];
type Breakpoint = "xs" | "sm" | "md" | "lg" | "xl";

interface Props {
  columns:
    | ColumnRule
    | {
        [key in Breakpoint]?: ColumnRule;
      };
  children: unknown;
  hasEvenRows?: boolean;
  className?: string;
}

const { columns, hasEvenRows, className } = Astro.props;

/*
 * This may look a bit complicated, but all of this is necessary to work around
 * Astro and Tailwind's constraints. Tailwind has a number of CSS rules for
 * grid-template-columns, but due to these classnames being generated
 * dynamically, Astro cannot "tell" Tailwind to generate classnames on the fly,
 * so we have to resort to custom styles.
 *
 * This function spits out an object with grid-template-column rules mapped to
 * each breakpoint, and then we inject them as CSS variables to the container
 * div below.
 */
const makeColumnVars = (
  columns: Props["columns"],
): { [key in Breakpoint as `columns-${key}`]?: string } => {
  const columnMapping =
    typeof columns === "number" ||
    typeof columns === "string" ||
    Array.isArray(columns)
      ? { xs: columns }
      : columns;

  return Object.entries(columnMapping).reduce((acc, [breakpoint, cols]) => {
    let columnsRule;

    if (typeof cols === "number") {
      columnsRule = `repeat(${cols}, minmax(0, 1fr))`;
    }

    if (Array.isArray(cols)) {
      columnsRule = cols
        .map((col) => {
          if (typeof col === "number") {
            return `minmax(0, ${col}fr)`;
          }

          return col;
        })
        .join(" ");
    }

    return {
      ...acc,
      [`columns-${breakpoint}`]: columnsRule,
    };
  }, {});
};

const columnVars = makeColumnVars(columns);
---

<div
  class={clsx(
    "grid",
    {
      // Responsive column styles
      "grid-columns-sm": !!columnVars["columns-sm"],
      "grid-columns-md": !!columnVars["columns-md"],
      "grid-columns-lg": !!columnVars["columns-lg"],
      "grid-columns-xl": !!columnVars["columns-xl"],

      // Other modifiers
      "auto-rows-fr": hasEvenRows,
    },
    className,
  )}
>
  <slot />
</div>
<style define:vars={columnVars}>
  div {
    grid-template-columns: var(--columns-xs);
    column-gap: theme(spacing.md);
  }

  @media screen(sm) {
    .grid-columns-sm {
      grid-template-columns: var(--columns-sm);
    }
  }

  @media screen(md) {
    .grid-columns-md {
      grid-template-columns: var(--columns-md);
    }
  }

  @media screen(lg) {
    .grid-columns-lg {
      grid-template-columns: var(--columns-lg);
    }
  }

  @media screen(xl) {
    .grid-columns-xl {
      grid-template-columns: var(--columns-xl);
    }
  }
</style>
